name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Test Server
  test-server:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5

    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: 📦 Install server dependencies
      run: |
        cd server
        npm ci

    - name: 🧪 Run server tests
      run: |
        cd server
        npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/covid19_test

    - name: 🔍 Run server linting
      run: |
        cd server
        npm run lint

    - name: 🛡️ Security audit
      run: |
        cd server
        npm audit --audit-level high

  # Job 2: Test Client
  test-client:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5

    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: 📦 Install client dependencies
      run: |
        cd client
        npm ci

    - name: 🧪 Run client tests
      run: |
        cd client
        npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: 🔍 Run client linting
      run: |
        cd client
        npm run lint

    - name: 🏗️ Build client
      run: |
        cd client
        npm run build

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./client/coverage
        flags: client
        name: client-coverage

  # Job 3: Build and Test Docker
  docker-build:
    runs-on: ubuntu-latest
    needs: [test-server, test-client]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build server Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: false
        tags: covid19-server:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build client Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: false
        tags: covid19-client:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🐳 Test Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up --build -d
        sleep 30
        docker-compose -f docker-compose.test.yml ps
        docker-compose -f docker-compose.test.yml down

  # Job 4: Security Scan
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5

    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 5: Deploy (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test-server, test-client, docker-build, security]
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v5

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏗️ Build and push server image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: |
          saifyxpro/covid19-server:latest
          saifyxpro/covid19-server:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push client image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: true
        tags: |
          saifyxpro/covid19-client:latest
          saifyxpro/covid19-client:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "📝 Add your deployment script here (AWS, Azure, GCP, etc.)"
        echo "✅ Deployment completed successfully!"
